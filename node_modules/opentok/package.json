{
  "name": "opentok",
  "description": "OpenTokSDK for node.js",
  "version": "2.0.0-beta",
  "homepage": "https://github.com/bsstoner/opentok",
  "repository": {
    "type": "git",
    "url": "https://github.com/bsstoner/opentok.git"
  },
  "author": {
    "name": "Brian Stoner",
    "email": "bsstoner@gmail.com",
    "url": "http://brianstoner.com"
  },
  "main": "./lib/opentok",
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "jasmine-node": "~1.3.0",
    "nock": "~0.27.2"
  },
  "dependencies": {
    "request": "~2.33.0"
  },
  "readme": "# OpenTok Node.js SDK\n\nThe OpenTok server SDKs include code for your web server. Use these SDKs to generate\n[sessions](http://tokbox.com/opentok/tutorials/create-session/) and to obtain\n[tokens](http://tokbox.com/opentok/tutorials/create-token/) for [OpenTok](http://www.tokbox.com/)\napplications.\n\nThis version of the SDK also includes support for working with OpenTok 2.0 archives.\n\n## Installation\n\nFor this beta version, the OpenTok Node.js SDK is included as a tgz file. Install it by calling: \n\n    npm install opentok-node.tgz\n\nThen install other required dependencies by calling:\n\n   npm install\n\n## Requirements\n\nYou need an OpenTok API key and API secret, which you can obtain at <https://dashboard.tokbox.com>.\n\nAdd the following code to the top of any file using the `opentok` module:\n\n    var OpenTok = require('opentok');\n\n\n## OpenTokSDK\n\nIn order to use any of the server side functions, you must first create an `OpenTokSDK` object with your developer credentials.  \n\nYou must pass in your OpenTok API key and *API secret (see <https://dashboard.tokbox.com>):\n\n<pre>\nvar key = '';    // Replace with your API key  \nvar secret = '';  // Replace with your API secret  \nvar opentok = new OpenTok.OpenTokSDK(key, secret);\n</pre>\n\n\n## Creating Sessions\n\nUse your `OpenTokSDK` object to create a `session_id`. See <http://tokbox.com/opentok/tutorials/create-session/> for more details.\n`createSession` takes 2-3 parameters:  \n\n* location [string] -- An IP address that the OpenTok servers will use to situate the session in its\nglobal network. If you do not pass in a location hint, the OpenTok servers will be based on first\nclient connecting to the session.\n\n* properties [object] -- Optional. Set p2p.preference as \"enabled\" to create a peer-to-peer\nsession, or to \"disabled\" to create an OpenTok server-enabled session. The OpenTok media server provides benefits not available in peer-to-peer sessions. For example, the OpenTok media server can\ndecrease bandwidth usage in multiparty sessions. Also, the OpenTok server can improve the quality of the user experience through [dynamic traffic shaping](http://www.tokbox.com/blog/quality-of-experience-and-traffic-shaping-the-next-step-with-mantis). For information on pricing, see the <a href=\"http://www.tokbox.com/pricing\">OpenTok pricing page.\n\n* callback [function(sessionId)] -- This is a function that handles the server response after session has been created. The result parameter of the function is the OpenTok session ID (a string).\n\n\n### Example: peer-to-peer disabled (default)\n\n<pre>\nvar location = '74.125.239.103'; // Use an IP address representative of the clients in your session.\nvar sessionId;\nopentok.createSession(location, function(result){\n  sessionId = result;\n  // Do things with sessionId\n});\n</pre>\n\n### Example: peer-to-peer enabled\n\n<pre>\nvar location = '74.125.239.103'; // Use an IP address representative of the clients in your session.\nvar sessionId;\nopentok.createSession(location, {'p2p.preference':'enabled'}, function(result){\n  sessionId = result;\n});\n</pre>\n\n\n## Generating Tokens\n\nWith the generated session ID and an OpenTokSDK object, you can start generating tokens for each\nuser. See <http://tokbox.com/opentok/tutorials/create-token/> for more details.\n\nThe `generateToken()` method takes in an object with 1-4 properties, and returns a token string:\n\n* session_id [string] - REQUIRED. This token is tied to the session.\n* role [string] - Optional. OpenTok.RoleConstants.{SUBSCRIBER|PUBLISHER|MODERATOR}. Publisher role used when omitted.\n* expire_time [int] - Optional. Time when token will expire in unix timestamp.\n* connection_data [string] - Optional. Stores static metadata to pass to other users connected to the session (e.g. names, user id, etc.).\n\n<pre>\nvar token = opentok.generateToken({session_id:session_id, role:OpenTok.RoleConstants.PUBLISHER, connection_data:\"userId:42\"});\n</pre>\n\n\n## Working with archives\n\nThe following function starts recording an archive of an OpenTok 2.0 session (given a session ID)\nand returns the archive ID (on success).\n\n<pre>\nstartArchive = function(sessionId) {\n  startArchiveOptions = {name: \"archive-\" + new Date()}\n  ot.startArchive(sessionId, startArchiveOptions, function(error, archive) {\n    if (error) {\n      console.log(\"error:\", error);\n    } else {\n      console.log(\"new archive:\" + archive.id);\n      return archive.id;\n    }\n  });\n}\n</pre>\n\nThe following function stops the recording of an archive (given an archive ID), returning\ntrue on success, and false on failure.\n\n<pre>\nstopArchive = function(archiveId) {\n  ot.stopArchive(sessionId, function(error, archive) {\n    if (error) {\n      console.log(\"error:\", error);\n    } else {\n      console.log(\"Stopped archive:\" + archive.id);\n    }\n  });\n}\n</pre>\n\nThe following function logs information on a given archive:\n\n<pre>\ngetArchive = function(archiveId) {\n  ot.getArchive(archiveId, function(error, archive) {\n    if (error) {\n      console.log(\"error:\", error);\n    } else {\n      console.log(\"Archive:\", archive);\n    }\n  });\n}\n</pre>\n\nThe following method logs information on multiple archives. If you do not pass in\noffset and count parameters, the method logs information on up to 50 archives:\n\n<pre>\nlistArchives = function(offset, count) {\n  listArchiveOptions = {};\n  if (offset) {\n    listArchiveOptions.offset = offset;\n  }\n  if (count) {\n    listArchiveOptions.count = count;\n  }\n  ot.listArchives(listArchiveOptions, function(error, archives, totalCount) {\n    if (error) {\n      console.log(\"error:\", error);\n    } else {\n      console.log(totalCount + \" archives\");\n      for (var i = 0; i &lt; archives.length; i++) {\n        console.log(archives[i].id);\n      }\n    }\n  });\n}\n</pre>\n\nThe following function deletes an archive:\n\n<pre>\ndeleteArchive = function(archiveId) {\n  ot.deleteArchive(archiveId, function(error) {\n    if (error) {\n      console.log(\"error:\", error);\n    } else {\n      console.log(\"Deleted archive:\", archiveId);\n    }\n  });\n}\n</pre>\n\n\n## Examples\n\n  Check out the basic working example in samples/app.js\n\n### To run test suite:\n    jasmine-node --captureExceptions spec/\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bsstoner/opentok/issues"
  },
  "_id": "opentok@2.0.0-beta",
  "dist": {
    "shasum": "3b27031987b1bd961fd17f6b0135a8e6f00aa382"
  },
  "_resolved": "opentok-node.tgz",
  "_from": "opentok-node.tgz"
}
